-- CLUEDO
-- One deterministic initial shuffle out of 2520 possibilities: C(8,2)=28 times C(6,2)=15 times C(4,2)=6
-- Dealer cards 1 and 2 
-- Mustard cards 3 and 4
-- Scarlet cards 5 and 6
-- Peacock cards 7 and 8 
-- Strategy: random choice of the cards to ask for
-- Knowledge: every player learns only from her direct requests

-- number of reachable states: 1.74456e+06 (2^20.7344)

MODULE main

VAR

black: dealer(mustard,scarlet,peacock);
mustard : player(0,3,4,black.turn,scarlet,peacock);
scarlet: player(1,5,6,black.turn,mustard,peacock);
peacock: player(2,7,8,black.turn,scarlet,mustard);

-- TRUE (it is possible that someone wins)
CTLSPEC
EF (black.turn = -1);

-- TRUE (it is possible that mustard wins)
CTLSPEC
EF (mustard.win);

-- FALSE: the random strategy might cause divergence of the game
CTLSPEC
AF (black.turn = -1);

-- Note for the interpretation of the following results: 
-- every turn is 6 moves, in one turn a lucky player might learn 2 cards

CTLSPEC -- TRUE
EBF 25..30 (black.turn = -1);

CTLSPEC -- FALSE
EBF 19..24 (black.turn = -1); 


-- Dealer: reference to the three players

MODULE dealer(p0,p1,p2)

VAR

turn : {-1,0,1,2}; 

ASSIGN

init(turn) := 0;

next(turn) :=
case
(p0.win | p1.win | p2.win) : -1;
(turn = 0) & (p0.state = end) : 1;
(turn = 1) & (p1.state = end) : 2;
(turn = 2) & (p2.state = end) : 0;
TRUE : turn;
esac;


-- Player: identification number, first card, second card, 
--         turn variable managed by the dealer, 
--         reference to the other players

MODULE player(id,c1,c2,turn,p1,p2) 

-- local variables

VAR

state : {idle,card1,card2,wait,listen,end};
win : boolean;
ask1 : 0..8;
ask2 : 0..8;
show: -1..8;
know1 : boolean;
know2 : boolean;
know3 : boolean;
know4 : boolean;
know5 : boolean;
know6 : boolean;
know7 : boolean;
know8 : boolean;

ASSIGN

init(state) := idle;
init(win) := FALSE;
init(ask1) := 0;
init(ask2) := 0;
init(show) := 0;
init(know1) := (c1 = 1 | c2 = 1) ? TRUE : FALSE;
init(know2) := (c1 = 2 | c2 = 2) ? TRUE : FALSE;
init(know3) := (c1 = 3 | c2 = 3) ? TRUE : FALSE;
init(know4) := (c1 = 4 | c2 = 4) ? TRUE : FALSE;
init(know5) := (c1 = 5 | c2 = 5) ? TRUE : FALSE;
init(know6) := (c1 = 6 | c2 = 6) ? TRUE : FALSE;
init(know7) := (c1 = 7 | c2 = 7) ? TRUE : FALSE;
init(know8) := (c1 = 8 | c2 = 8) ? TRUE : FALSE;

next(state) :=
case
(state = idle) & (turn = id) : card1;
(state = card1) : card2;
(state = card2) : wait;
(state = wait) : listen;
(state = listen) : end;
(state = end) : idle;
TRUE : state;
esac;

next(ask1) :=
case
(state = end) : 0;
(state = card1) : {1,2,3,4,5,6,7,8};
TRUE : ask1;
esac;

next(ask2) :=
case
(state = end) : 0;
(state = card2) & (ask1 = 1) : {2,3,4,5,6,7,8};
(state = card2) & (ask1 = 2) : {1,3,4,5,6,7,8};
(state = card2) & (ask1 = 3) : {2,1,4,5,6,7,8};
(state = card2) & (ask1 = 4) : {1,3,2,5,6,7,8};
(state = card2) & (ask1 = 5) : {2,3,4,1,6,7,8};
(state = card2) & (ask1 = 6) : {1,3,4,5,2,7,8};
(state = card2) & (ask1 = 7) : {2,3,4,5,6,1,8};
(state = card2) & (ask1 = 8) : {1,3,4,5,6,7,2};
TRUE : ask2;
esac;

next(know1) :=
case
(state = listen) & (p1.show = 1 | p2.show = 1) : TRUE;
TRUE : know1;
esac;

next(know2) :=
case
(state = listen) & (p1.show = 2 | p2.show = 2) : TRUE;
TRUE : know2;
esac;
 
next(know3) :=
case
(state = listen) & (p1.show = 3 | p2.show = 3) : TRUE;
TRUE : know3;
esac;

next(know4) :=
case
(state = listen) & (p1.show = 4 | p2.show = 4) : TRUE;
TRUE : know4;
esac;

next(know5) :=
case
(state = listen) & (p1.show = 5 | p2.show = 5) : TRUE;
TRUE : know5;
esac;

next(know6) :=
case
(state = listen) & (p1.show = 6 | p2.show = 6) : TRUE;
TRUE : know6;
esac;
 
next(know7) :=
case
(state = listen) & (p1.show = 7 | p2.show = 7) : TRUE;
TRUE : know7;
esac;

next(know8) :=
case
(state = listen) & (p1.show = 8 | p2.show = 8) : TRUE;
TRUE : know8;
esac;


next(show) :=
case
(p1.state = end) | (p2.state = end) : 0;
(turn != id) & (p1.ask1 = c1) & (p1.ask2 = c2) & (show = 0) : {c1,c2}; 
(turn != id) & (p1.ask1 = c2) & (p1.ask2 = c1) & (show = 0) : {c1,c2}; 
(turn != id) & (p1.ask1 = c1) & (p1.ask2 != 0) & (show = 0) : {c1};
(turn != id) & (p1.ask1 = c2) & (p1.ask2 != 0) & (show = 0) : {c2};
(turn != id) & (p1.ask2 = c1) & (p1.ask1 != 0) & (show = 0) : {c1};
(turn != id) & (p1.ask2 = c2) & (p1.ask1 != 0) & (show = 0) : {c2};
(turn != id) & (p1.ask1 != 0) & (p1.ask2 != 0) & (show = 0) : -1;
(turn != id) & (p2.ask1 = c1) & (p2.ask2 = c2) & (show = 0) : {c1,c2}; 
(turn != id) & (p2.ask1 = c2) & (p2.ask2 = c1) & (show = 0) : {c1,c2}; 
(turn != id) & (p2.ask1 = c1) & (p2.ask2 != 0) & (show = 0) : {c1};
(turn != id) & (p2.ask1 = c2) & (p2.ask2 != 0) & (show = 0) : {c2};
(turn != id) & (p2.ask2 = c1) & (p2.ask1 != 0) & (show = 0) : {c1};
(turn != id) & (p2.ask2 = c2) & (p2.ask1 != 0) & (show = 0) : {c2};
(turn != id) & (p2.ask1 != 0) & (p2.ask2 != 0) & (show = 0) : -1;
TRUE: show;
esac;

next(win) :=
case
know3 & know4 & know5 & know6 & know7 & know8 : TRUE;
TRUE : win;
esac;




